version: '3.8'
services:
  postgresql:
    image: postgres:14-alpine
    container_name: ${PG_HOST}
    restart: always
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_DB: ${PG_DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
#      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${PG_DB_NAME} -U $${PG_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      java_app_network:


  backend:
    image: ${DH_REPO}
    environment:
      - PG_HOST=${PG_HOST}
      - PG_DB_NAME=${PG_DB_NAME}
      - PG_USER=${PG_USER}
      - PG_PASS=${PG_PASS}
      - MONGO_DB_NAME=${MONGO_DB_NAME}
      - MONGO_HOST=${MONGO_HOST}
      - REDIS_HOST=${REDIS_HOST}
      - PG_PORT=5432
      - MONGO_PORT=27017
      - REDIS_PORT=6379
    container_name: schedule-app
    restart: always
    depends_on:
      - postgresql
    ports:
      - "30080:8080"
    networks:
      - java_app_network

  redis:
    image: redis:alpine
    container_name: ${REDIS_HOST}
    restart: always
    networks:
      java_app_network:

  mongodb:
    image: mongo:jammy
    container_name: ${MONGO_HOST}
    restart: always
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
      - MONGO_INITDB_DATABASE=${MONGO_DB_NAME}
    networks:
      java_app_network:

networks:
  java_app_network:
    name: green_team
    labels:
      Author: 'Vitaliy K'

volumes:
  postgres_data:
  mongo_data:
